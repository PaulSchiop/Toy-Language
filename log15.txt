Program state id: 1
ExeStack: My stack: int v; v = 10; print(v)

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = 10; print(v)
int v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = 10; print(v)
int v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = 10; print(v)

SymTable: My dictionary: v -> 0

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = 10; print(v)

SymTable: My dictionary: v -> 0

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = 10

SymTable: My dictionary: v -> 0

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = 10

SymTable: My dictionary: v -> 0

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)

SymTable: My dictionary: v -> 10

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)

SymTable: My dictionary: v -> 10

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: v -> 10

Out: My list: 10

FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: bool v; v = bool; print(v)

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)
bool v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)
bool v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = bool

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = bool

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: bool v; v = bool; print(v)

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)
bool v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)
bool v

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: v = bool; print(v)

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = bool

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)
v = bool

SymTable: My dictionary: v -> null

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)

SymTable: My dictionary: v -> bool

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: print(v)

SymTable: My dictionary: v -> bool

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: v -> bool

Out: My list: bool

FileTable: My dictionary: 
Heap: Heap: My map: 

Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 4
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 6
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 4
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 5
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 6
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 4
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 5
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 4
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 5
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5]


Program state id: 4
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 5
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 4
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 5
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 4
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 5
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 6
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[5, 4, 6]


Program state id: 7
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 8
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 8
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 8
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 8
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 7
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 8
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 9
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 7
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 8
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 9
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 7
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 8
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 7
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 8
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8]


Program state id: 7
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 8
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 7
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 8
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 7
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 8
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 9
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[8, 7, 9]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
4
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 20
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: Ref(int) v1; Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v1

SymTable: My dictionary: 
Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v2; Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v2

SymTable: My dictionary: v1 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: Ref(int) v3; int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
Ref(int) v3

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: int cnt; new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
int cnt

SymTable: My dictionary: v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v1, 2); new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v1, 2)

SymTable: My dictionary: cnt -> 0
v1 -> (0, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 
BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v2, 3); new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v2, 3)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (0, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: new(v3, 4); CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
new(v3, 4)

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (0, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: CreateBarrierStatement(cnt, rH(v2)); fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
CreateBarrierStatement(cnt, rH(v2))

SymTable: My dictionary: cnt -> 0
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))); fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))); await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: await(cnt); writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))
fork(await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2)))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: await(cnt); print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: writeHeap(v1, rH(v1)MUL10); print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: await(cnt); writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 2
ExeStack: My stack: print(rH(v1))
writeHeap(v1, rH(v1)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))
await(cnt)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 2
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: print(rH(v3))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: print(rH(v1))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 
FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 1
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 2
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 3
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: writeHeap(v2, rH(v2)MUL10); print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))
writeHeap(v2, rH(v2)MUL10)

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 30
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: print(rH(v2))

SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


Program state id: 3
ExeStack: My stack: 
SymTable: My dictionary: cnt -> 1
v1 -> (1, int)
v2 -> (2, int)
v3 -> (3, int)

Out: My list: 4
300

FileTable: My dictionary: 
Heap: Heap: My map: 1 -> 20
2 -> 300
3 -> 4

BarrierTable: BarrierTable:
1 -> 3=[2, 1, 3]


